// Generated by gencpp from file whatever/rc_number.msg
// DO NOT EDIT!


#ifndef WHATEVER_MESSAGE_RC_NUMBER_H
#define WHATEVER_MESSAGE_RC_NUMBER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace whatever
{
template <class ContainerAllocator>
struct rc_number_
{
  typedef rc_number_<ContainerAllocator> Type;

  rc_number_()
    : rc_number(0)
    , record_number(0)  {
    }
  rc_number_(const ContainerAllocator& _alloc)
    : rc_number(0)
    , record_number(0)  {
  (void)_alloc;
    }



   typedef int16_t _rc_number_type;
  _rc_number_type rc_number;

   typedef int16_t _record_number_type;
  _record_number_type record_number;





  typedef boost::shared_ptr< ::whatever::rc_number_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::whatever::rc_number_<ContainerAllocator> const> ConstPtr;

}; // struct rc_number_

typedef ::whatever::rc_number_<std::allocator<void> > rc_number;

typedef boost::shared_ptr< ::whatever::rc_number > rc_numberPtr;
typedef boost::shared_ptr< ::whatever::rc_number const> rc_numberConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::whatever::rc_number_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::whatever::rc_number_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::whatever::rc_number_<ContainerAllocator1> & lhs, const ::whatever::rc_number_<ContainerAllocator2> & rhs)
{
  return lhs.rc_number == rhs.rc_number &&
    lhs.record_number == rhs.record_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::whatever::rc_number_<ContainerAllocator1> & lhs, const ::whatever::rc_number_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace whatever

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::whatever::rc_number_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::whatever::rc_number_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whatever::rc_number_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::whatever::rc_number_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whatever::rc_number_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::whatever::rc_number_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::whatever::rc_number_<ContainerAllocator> >
{
  static const char* value()
  {
    return "864afb57b68d8c11afa6468b1766e735";
  }

  static const char* value(const ::whatever::rc_number_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x864afb57b68d8c11ULL;
  static const uint64_t static_value2 = 0xafa6468b1766e735ULL;
};

template<class ContainerAllocator>
struct DataType< ::whatever::rc_number_<ContainerAllocator> >
{
  static const char* value()
  {
    return "whatever/rc_number";
  }

  static const char* value(const ::whatever::rc_number_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::whatever::rc_number_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 rc_number\n"
"int16 record_number\n"
;
  }

  static const char* value(const ::whatever::rc_number_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::whatever::rc_number_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rc_number);
      stream.next(m.record_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rc_number_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::whatever::rc_number_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::whatever::rc_number_<ContainerAllocator>& v)
  {
    s << indent << "rc_number: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rc_number);
    s << indent << "record_number: ";
    Printer<int16_t>::stream(s, indent + "  ", v.record_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHATEVER_MESSAGE_RC_NUMBER_H
